require 'spec_helper'

describe TrendReport do
  it {should respond_to :x_data}
  it {should respond_to :y_data}
  it {should respond_to :x_label}
  it {should respond_to :y_label}
  it {should respond_to :title}
  
  let(:report) {FactoryGirl.create(:trend_report)}

  describe "x_data" do
    it "is non nil" do
      report.x_data = nil
      report.should_not be_valid
    end

    it "should quack like an array" do
      report.x_data.is_a?(Array).should == true
    end
  end

  describe "y_data" do
    it "is non nil" do
      report.y_data = nil
      report.should_not be_valid
    end
    
    it "should quack like an array" do
      report.y_data.is_a?(Array).should == true
    end
  end

  describe "x_label" do
    it "is non nil" do
      report.x_label = nil
      report.should_not be_valid
    end
  end

  describe "y_label" do
    it "is non nil" do
      report.y_label = nil
      report.should_not be_valid
    end
  end

  describe "title" do
    it "is non nil" do
      report.title = nil
      report.should_not be_valid
    end
  end

  describe "self.getReport" do
    
    it "return weeks for new users" do
      user = FactoryGirl.create(:user)
      t = user.transactions.build(transaction_type: false, value_cents: 5200, date: Date.today)
      t.save
      report = TrendReport.getReport(user)
      report.title.split.last.should == "Week"
    end

    it "return months for old users" do
      user = FactoryGirl.create(:user)
      t = user.transactions.build(transaction_type: false, value_cents: 5200, date: Date.today-3.months)
      t.save
      report = TrendReport.getReport(user)
      report.title.split.last.should == "Month"
    end

    it "return months for new users with the correct params" do
      user = FactoryGirl.create(:user)
      t = user.transactions.build(transaction_type: false, value_cents: 5200, date: Date.today)
      t.save
      report = TrendReport.getReport(user, {period: "month"})
      report.title.split.last.should == "Month"
    end
    
    it "return weeks for old users with the correct params" do
      user = FactoryGirl.create(:user)
      t = user.transactions.build(transaction_type: false, value_cents: 5200, date: Date.today-1.year)
      t.save
      report = TrendReport.getReport(user, {period: "week"})
      report.title.split.last.should == "Week"
    end

    it "return days with the correct params" do
      user = FactoryGirl.create(:user)
      t = user.transactions.build(transaction_type: false, value_cents: 5200, date: Date.today-1.year)
      t.save
      report = TrendReport.getReport(user , {period: "day"})
      report.title.split.last.should == "Day"
    end

    it "returns all values with no category params" do
      user = FactoryGirl.create(:user)
      c = user.categories.build(title:"food", transaction_type:false)
      c.save
      t = user.transactions.build(transaction_type: false, value_cents: 5200, date: Date.today, category_id: c.id)
      t.save
      report = TrendReport.getReport(user)
      report.y_data.last[1].should == 52
    end

    it "returns correct values with category params" do
      user = FactoryGirl.create(:user)
      c = user.categories.build(title:"food", transaction_type:false)
      c.save
      t = user.transactions.build(transaction_type: false, value_cents: 5200, date: Date.today, category_id: c.id)
      t.save
      report = TrendReport.getReport(user, {category_id: 0})
      report.y_data.should == []
    end

    it "limits the data to 1 year with old users" do
      user = FactoryGirl.create(:user)
      t = user.transactions.build(transaction_type: false, value_cents: 5200, date: Date.today-2.years)
      t.save
      report = TrendReport.getReport(user)
      report.y_data.should == []
    end

    it "includes the data to 1 year with old users" do
      user = FactoryGirl.create(:user)
      t = user.transactions.build(transaction_type: false, value_cents: 5200, date: Date.today-360.days)
      t.save
      report = TrendReport.getReport(user)
      
      report.y_data.first[1].should == 52 
    end

    it "includes data from given startDate" do
      user = FactoryGirl.create(:user)
      t = user.transactions.build(transaction_type: false, value_cents: 5200, date: Date.today-7.months)
      t.save
      report = TrendReport.getReport(user, {trendStartDate: "2013/07/05", period: "month"})
      
      report.y_data.should == []
    end

    it "includes data until given endDate" do
      user = FactoryGirl.create(:user)
      t = user.transactions.build(transaction_type: false, value_cents: 5200, date: Date.parse("11/9/2013"))
      t.save
      
      report = TrendReport.getReport(user, {trendEndDate: "10/9/2013", period: "month"})
      
      report.y_data.should == []
    end

    it "handles no transactions" do
      user = FactoryGirl.create(:user)
      
      report = TrendReport.getReport(user, {trendEndDate: Date.today-5.days})
      
      report.should == false
    end
  

  
  end

end
